---
import PostList from "./PostList.astro";

interface Props {
    posts: any[];
    groups?: string[];
}

const { posts, groups = [] } = Astro.props;

function extractTags(post: any): string[] {
    const fm = post.frontmatter ?? post.data ?? {};
    let tags = fm.tags ?? fm.tag ?? fm.categories ?? fm.category ?? [];
    if (typeof tags === "string") tags = [tags];
    if (!Array.isArray(tags)) tags = [];
    return tags.map((t: string) => t.toLowerCase().trim()).filter(Boolean);
}

const wanted = groups.map((g) => g.toLowerCase().trim()).filter(Boolean);

let buckets = new Map<string, any[]>();
if (wanted.length > 0) {
    for (const g of wanted) buckets.set(g, []);
    buckets.set("other", []);
    for (const post of posts) {
        const ptags = extractTags(post);
        const hits = wanted.filter((g) => ptags.includes(g));
        if (hits.length === 0) {
            buckets.get("other")!.push(post);
        } else {
            for (const g of hits) buckets.get(g)!.push(post);
        }
    }
}
---

{
    wanted.length === 0 ? (
        <PostList posts={posts} />
    ) : (
        <>
            {groups.map((label) => {
                const key = label.toLowerCase().trim();
                const list = buckets.get(key) ?? [];
                if (list.length === 0) return null;
                return <PostList posts={buckets.get(label)!} title={label} />;
            })}

            {(buckets.get("other") ?? []).length > 0 && (
                <PostList posts={buckets.get("other")!} title="other" />
            )}
        </>
    )
}
