---
import DefaultList from "./Lists/Books.astro";
import GroupButtons from "./GroupsBtn.astro";

interface Props {
    media: any[];
    groupBy?: string[];
    favorites?: boolean;
    List?: any; // keep it simple if you don't care about TS here
}

const {
    media,
    groupBy = ["time"],
    favorites = false,
    List = DefaultList,
} = Astro.props;

function fm(post: any) {
    return post.frontmatter ?? post.data ?? {};
}

function cmp(a: any, b: any) {
    const da = new Date(fm(a).date ?? 0).getTime();
    const db = new Date(fm(b).date ?? 0).getTime();
    return db - da; // newest first
}

function buildBuckets(key: string) {
    const buckets = new Map<string, any[]>();

    for (const post of media) {
        const f = fm(post);
        const raw = f[key];
        const k = raw == null || raw === "" ? `No ${key}` : String(raw);
        if (!buckets.has(k)) buckets.set(k, []);
        buckets.get(k)!.push(post);
    }

    // sort posts inside each bucket
    for (const [, arr] of buckets) arr.sort(cmp);

    // sort the bucket keys: numeric descending if numbers, else alpha
    const groups = Array.from(buckets.keys()).sort((a, b) => {
        const na = Number(a);
        const nb = Number(b);
        const aIsNum = !isNaN(na);
        const bIsNum = !isNaN(nb);

        if (aIsNum && bIsNum) {
            return nb - na; // highest number first
        }
        return a.toLowerCase().localeCompare(b.toLowerCase());
    });

    return { groups, buckets };
}

const prebuilt = groupBy.map((k) => ({ key: k, ...buildBuckets(k) }));
const favoritesList = favorites ? media.filter((p) => !!fm(p).favorite) : [];
---

{
    favorites && favoritesList.length > 0 && (
        <List posts={favoritesList} title="My all time favorites:" />
    )
}

<GroupButtons keys={groupBy} />

{
    prebuilt.map(({ key, groups, buckets }, i) => (
        <section class={`groupset ${i === 0 ? "" : "hidden"}`} data-key={key}>
            {groups.map((g) => {
                const list = buckets.get(g) ?? [];
                if (list.length === 0) return null;
                return <List posts={list} title={g} />;
            })}
        </section>
    ))
}

<style>
    .hidden {
        display: none;
    }
</style>

<script is:inline>
    document.addEventListener("groupby-change", (e) => {
        const key = e.detail?.key;
        if (!key) return;
        document
            .querySelectorAll(".groupset")
            .forEach((s) =>
                s.classList.toggle("hidden", s.dataset.key !== key),
            );
    });
</script>
