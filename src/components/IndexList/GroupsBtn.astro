---
interface Props {
    keys: string[]; // your groupBy
}

const { keys } = Astro.props;
const show = keys.length > 1;
---

{
    show && (
        <div class="groupby-buttons" aria-label="Group by">
            {keys.map((k, i) => (
                <button
                    type="button"
                    class={`groupby-btn ${i === 0 ? "active" : ""}`}
                    data-key={k}
                >
                    {k}
                </button>
            ))}
        </div>
    )
}

<style>
    .groupby-buttons {
        display: flex;
        gap: 0.5rem;
        margin: 0.75rem 0 1.25rem;
        flex-wrap: wrap;
    }
    .groupby-btn {
        padding: 0.35rem 0.6rem;
        border: 1px solid #888;
        border-radius: 0.4rem;
        background: transparent;
        cursor: pointer;
    }
    .groupby-btn.active {
        background: #eee;
        font-weight: 600;
    }
</style>

<script is:inline>
    const root = document.querySelector(".groupby-buttons");
    if (root) {
        root.addEventListener("click", (e) => {
            const btn = e.target.closest("button.groupby-btn");
            if (!btn) return;

            // toggle active class locally
            root.querySelectorAll("button.groupby-btn").forEach((b) =>
                b.classList.toggle("active", b === btn),
            );

            // notify parent which key was chosen
            root.dispatchEvent(
                new CustomEvent("groupby-change", {
                    bubbles: true,
                    detail: { key: btn.dataset.key },
                }),
            );
        });
    }
</script>
