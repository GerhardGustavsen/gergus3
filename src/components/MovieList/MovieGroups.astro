---
import PostList from "./MovieList.astro";

interface Props {
    media: any[];
    groupBy: string; // e.g. "director", "year", "tags"
    favorites?: boolean; // default false
}

const { media, groupBy = "director", favorites = true } = Astro.props;

function fm(post: any) {
    return post.frontmatter ?? post.data ?? {};
}

function cmpMovies(a: any, b: any) {
    const fa = fm(a);
    const fb = fm(b);
    const ra = fa.rating ?? 0;
    const rb = fb.rating ?? 0;
    if (ra !== rb) return rb - ra;
    const ya = Number(fa.year ?? 0);
    const yb = Number(fb.year ?? 0);
    return yb - ya;
}

// Favorites (only filtered if enabled)
const favs = favorites ? media.filter((p) => !!fm(p).favorite) : [];

// Group by chosen attribute
const buckets = new Map<string, any[]>();
for (const post of media) {
    const f = fm(post);
    const key = f[groupBy] ?? `Unknown ${groupBy}`;
    if (!buckets.has(key)) buckets.set(key, []);
    buckets.get(key)!.push(post);
}

// Sort inside each bucket
for (const [key, arr] of buckets) arr.sort(cmpMovies);

// Sort group keys
const groups = Array.from(buckets.keys()).sort((a, b) =>
    a.toLowerCase().localeCompare(b.toLowerCase()),
);
---

<>
    {
        favorites && favs.length > 0 && (
            <PostList posts={favs} title="My all time favorites:" />
        )
    }

    {
        groups.map((g) => {
            const list = buckets.get(g) ?? [];
            if (list.length === 0) return null;
            return <PostList posts={list} title={g} />;
        })
    }
</>
